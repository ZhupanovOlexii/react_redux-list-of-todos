{"version":3,"sources":["store/index.ts","TodoItem.tsx","TodoList.tsx","api.tsx","App.tsx","index.tsx"],"names":["setSortField","sortField","type","getIsLoading","state","isLoading","getIsLoaded","isLoaded","getVisibleTodos","visibleTodos","todos","sort","a","b","title","localeCompare","user","name","completed","initialState","store","createStore","action","filter","todo","id","composeWithDevTools","TodoItem","dispatch","useDispatch","className","onClick","TodoList","map","key","getPreparedTodos","Promise","all","fetch","then","response","json","todosFromServer","usersFromServer","preparedTodos","find","userId","App","useSelector","finishLoading","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6de5e97c.chunk.js","sourcesContent":["import { createStore, AnyAction } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\nconst START_LOADING = 'START_LOADING';\nconst FINISH_LOADING = 'FINISH_LOADING';\n\nexport const BY_TITLE = 'BY_TITLE';\nexport const BY_NAME = 'BY_NAME';\nexport const BY_STATUS = 'BY_STATUS';\n\nconst SORT_BY = 'SORT_BY';\nconst DELETE_TODO = 'DELETE';\n\nexport const startLoading = () => ({ type: START_LOADING });\nexport const finishLoading = (todos: PreparedTodo[]) => ({\n  type: FINISH_LOADING,\n  todos,\n});\nexport const setSortField = (sortField: string) => ({\n  type: SORT_BY,\n  sortField,\n});\n\nexport const deleteTodo = (id: number) => ({\n  type: DELETE_TODO,\n  id,\n});\n\nexport const getTodos = (state: RootState) => state.todos;\nexport const getIsLoading = (state: RootState) => state.isLoading;\nexport const getIsLoaded = (state: RootState) => state.isLoaded;\nexport const getSortField = (state: RootState) => state.sortField;\n\nexport const getVisibleTodos = (state: RootState) => {\n  const visibleTodos = [...state.todos];\n\n  switch (state.sortField) {\n    case BY_TITLE:\n      visibleTodos.sort((a: PreparedTodo, b: PreparedTodo) => (a.title.localeCompare(b.title)));\n      break;\n\n    case BY_NAME:\n      visibleTodos\n        .sort((a: PreparedTodo, b: PreparedTodo) => (a.user.name.localeCompare(b.user.name)));\n      break;\n\n    case BY_STATUS:\n      visibleTodos.sort((a: PreparedTodo, b: PreparedTodo) => (+a.completed - +b.completed));\n      break;\n\n    default:\n      return visibleTodos;\n  }\n\n  return visibleTodos;\n};\n\nexport type RootState = {\n  todos: PreparedTodo[];\n  sortField: string;\n  isLoaded: boolean;\n  isLoading: boolean;\n};\n\nconst initialState: RootState = {\n  todos: [],\n  sortField: '',\n  isLoaded: false,\n  isLoading: false,\n};\n\nconst rootReducer = (state = initialState, action: AnyAction): RootState => {\n  switch (action.type) {\n    case START_LOADING:\n      return {\n        ...state,\n        isLoading: true,\n        isLoaded: false,\n      };\n\n    case FINISH_LOADING:\n      return {\n        ...state,\n        todos: [...action.todos],\n        isLoaded: true,\n        isLoading: false,\n      };\n\n    case SORT_BY:\n      return {\n        ...state,\n        sortField: action.sortField,\n      };\n\n    case DELETE_TODO:\n      return {\n        ...state,\n        todos: [...state.todos].filter(todo => todo.id !== action.id),\n      };\n\n    default: return state;\n  }\n};\n\nconst store = createStore(rootReducer, composeWithDevTools());\n\nexport default store;\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { deleteTodo } from './store/index';\n\n\ntype TodoItemProps = {\n  todo: PreparedTodo;\n};\n\nconst TodoItem: React.FC<TodoItemProps> = ({ todo }) => {\n  const dispatch = useDispatch();\n\n  return (\n    <>\n      <div className={todo.completed\n        ? 'user__completed-true'\n        : 'user__completed-false'}\n      >\n        <div className=\"user\">\n          <span className=\"user__id\">{todo.id}</span>\n          <p className=\"user__name\">\n            Name:\n            {' '}\n            {todo.user.name}\n          </p>\n          <p className=\"user__title\">\n            Title:\n            {' '}\n            {todo.title}\n          </p>\n          <p className=\"user__status\">\n            Status:\n            {' '}\n            {todo.completed ? 'completed' : 'in procces'}\n          </p>\n          <button\n            type=\"button\"\n            className=\"button__delete\"\n            onClick={() => dispatch(deleteTodo(todo.id))}\n          >\n            Delete Todo\n          </button>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default TodoItem;\n","import React from 'react';\nimport TodoItem from './TodoItem';\n\ntype TodoListProps = {\n  todos: PreparedTodo[];\n};\n\nexport const TodoList: React.FC<TodoListProps> = ({ todos }) => {\n  return (\n    <div className=\"todo__list\">\n      {todos.map((todo) => (\n        <TodoItem todo={todo} key={todo.id} />\n      ))}\n    </div>\n  );\n};\n","const API_USERS_URL = 'https://jsonplaceholder.typicode.com/users';\nconst API_TODOS_URL = 'https://jsonplaceholder.typicode.com/todos';\n\n\nexport const getUsers = () => {\n  return fetch(API_USERS_URL)\n    .then(response => response.json());\n};\n\nexport const getTodos = () => {\n  return fetch(API_TODOS_URL)\n    .then(response => response.json());\n};\n\nexport const getPreparedTodos = async () => {\n  const [todosFromServer, usersFromServer] = await Promise.all([getTodos(), getUsers()]);\n  const preparedTodos = todosFromServer.map((todo: Todo) => ({\n    ...todo,\n    user: usersFromServer.find((user: User) => user.id === todo.userId),\n  }));\n\n  return preparedTodos;\n};\n","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport './App.scss';\nimport { TodoList } from './TodoList';\nimport { getPreparedTodos } from './api';\nimport {\n  BY_TITLE, BY_NAME, BY_STATUS,\n  startLoading,\n  finishLoading,\n  getVisibleTodos,\n  getIsLoaded,\n  getIsLoading,\n  setSortField,\n} from './store';\n\n\nconst App: React.FC = () => {\n  const dispatch = useDispatch();\n  const todos = useSelector(getVisibleTodos);\n  const isLoaded = useSelector(getIsLoaded);\n  const isLoading = useSelector(getIsLoading);\n\n\n  const loadedTodos = () => {\n    dispatch(startLoading());\n    getPreparedTodos().then((todosFromServer) => {\n      dispatch(finishLoading(todosFromServer));\n    });\n  };\n\n  return (\n    <div className=\"container\">\n      <h1>Dynamic list of TODOs</h1>\n      {!isLoaded\n        ? (\n          <button\n            type=\"button\"\n            className=\"button\"\n            onClick={loadedTodos}\n          >\n            {isLoading ? 'Loading...' : 'Click to Load'}\n          </button>\n        )\n        : (\n          <>\n            <div className=\"button__container\">\n\n              <button\n                className=\"button\"\n                type=\"button\"\n                onClick={() => dispatch(setSortField(BY_TITLE))}\n              >\n                Sort By Title\n              </button>\n              <button\n                className=\"button\"\n                type=\"button\"\n                onClick={() => dispatch(setSortField(BY_NAME))}\n              >\n                Sort By Name\n              </button>\n              <button\n                className=\"button\"\n                type=\"button\"\n                onClick={() => dispatch(setSortField(BY_STATUS))}\n              >\n                Sort By Status\n              </button>\n            </div>\n            <TodoList todos={todos} />\n          </>\n        )}\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport store from './store';\nimport App from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}